---
title: "Project 1"
author: "Tamdan Le, Alise Miller"
format: pdf
editor: visual
---

## Data Processing

### Question 1 Select columns

```{r}
library(tidyverse)
library(readr)
```


```{r}
EDU01A <-read_csv("data/EDU01a.csv")
EDU01A |>
  select(Area_name, STCOU, ends_with("D")) |>
  rename(area_name = Area_name) |>
  head(EDU01A, n=5)
```

### Question 2 Convert to long format

```{r}
EDU01A_long<-
  EDU01A |>
  select(Area_name, STCOU, ends_with("D")) |>
  rename(area_name = Area_name) |>
  pivot_longer(cols= ends_with("D"),
               names_to = "EDU_combined",
               values_to = "enrollment_value"
               ) 
  head(EDU01A_long, n=5)
```

### Question 3 Parsing

```{r}
EDU01A_longer <-
  EDU01A_long |>
  mutate(two_digit_year= (substr(EDU_combined, start=8, stop = 9)) ,
  year_dbl = as.double(two_digit_year), 
  year= if_else(year_dbl >25, 1900 + year_dbl, year_dbl <=25 + 2000),
  survey_value = substr(EDU_combined, start=1, stop = 7)
         )

long_updated <- select(EDU01A_longer, area_name,STCOU, enrollment_value,year, 
                       survey_value)

head(long_updated, n=5)
```

### Question 4 Two Tibbles

```{r}
County_indices <- grep(pattern = ", [A-Z]{2}", long_updated$area_name)
noncounty_tibble <- long_updated [-County_indices, ]
county_tibble <- long_updated [County_indices, ]

class(county_tibble) <- c("county", class(county_tibble))
class(noncounty_tibble) <- c("state", class(noncounty_tibble))

head(county_tibble, n=10)
head(noncounty_tibble, n=10)
```

### Question 5 County level new variable

```{r}
county_tibble |>
mutate(state = substr(area_name, nchar(area_name) - 1, nchar(area_name))
)
```

### Question 6 Non-county "division"

```{r}
noncounty_tibble <- noncounty_tibble |>
  mutate(
    state = sub(".*,\\s*", "", area_name),
division = case_when( 
  state %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", 
               "RHODE ISLAND", "VERMONT") 
  ~ "New England",
  state %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA") 
  ~ "Mid-Atlantic",
  state %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN") 
  ~ "East North Central",
  state %in% c("IOWA", "KANSAS", "MINNESOTA", "NEBRASKA", "NORTH DAKOTA", 
               "SOUTH DAKOTA") 
  ~ "West North Central",
  state %in% c("DELAWARE", "DISTRICT OF COLUMBIA","District of Columbia", 
               "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", 
               "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA") 
  ~ "South Atlantic",
  state %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE") 
  ~ "East South Central",
  state %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS") 
  ~ "West South Central",
  state %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", 
               "NEW MEXICO", "UTAH", "WYOMING") 
  ~ "Mountain",
  state %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON") 
  ~ "Pacific",
  TRUE ~ "ERROR" )
)
```

### Function for Steps 1 and 2 - Reading in Data

```{r}
readData <- function(filepath, columns= "!area_name & !STCOU") {
  data2 <- read.csv(filepath)
  filterdata <- select(data2, c(area_name = "Area_name", "STCOU"), 
                       ends_with("D"))
  long_data <- pivot_longer(filterdata, cols = (!area_name & !STCOU), 
                            names_to = "EDU_combined", 
                            values_to = "enrollment_value")
}
```

### Function for Step 3 - Parsing

```{r}
dataYear <- function(step2) {
  long_updated = mutate(step2, year_dbl= as.double(substr(EDU_combined, 
                                                          start=8, stop = 9)),
  year = if_else(year_dbl > 25, 1900 + year_dbl, 2000 + year_dbl),
  survey_value = substr(EDU_combined, start=1, stop = 7)
         )
  long_updated <- subset(long_updated, select = -year_dbl)
}
```

### Function for Step 5 - County Level Tibble

```{r}
state_function <- function(county_tibble){
  new_county_tibble <- mutate(county_tibble, 
                              state = substr(area_name, nchar(area_name) - 1,
                                             nchar(area_name))
         )
  return(new_county_tibble)
}
```

### Function for Step 6 - Non-county Level tibble

```{r}
division_function <- function(noncounty_tibble) {
  new_noncounty_tibble <- mutate(noncounty_tibble,
    state = sub(".*,\\s*", "", area_name),
    division = case_when(state %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", 
                                      "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT") 
                         ~ "New England",
                         state %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA") 
                         ~ "Mid-Atlantic",
                         state %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", 
                                      "WISCONSIN") 
                         ~ "East North Central",
                         state %in% c("IOWA", "KANSAS", "MINNESOTA", "NEBRASKA", 
                                      "NORTH DAKOTA", "SOUTH DAKOTA") 
                         ~ "West North Central",
                         state %in% c("DELAWARE", "DISTRICT OF COLUMBIA",
                                      "District of Columbia", "FLORIDA", 
                                      "GEORGIA", "MARYLAND", "NORTH CAROLINA", 
                                      "SOUTH CAROLINA", "VIRGINIA", 
                                      "WEST VIRGINIA") ~ "South Atlantic",
                         state %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", 
                                      "TENNESSEE") ~ "East South Central",
                         state %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", 
                                      "TEXAS") ~ "West South Central",
                         state %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", 
                                      "NEVADA", "NEW MEXICO", "UTAH", "WYOMING") 
                         ~ "Mountain",
                         state %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", 
                                      "WASHINGTON") ~ "Pacific",
                         TRUE ~ "ERROR" )
    )
  return(new_noncounty_tibble)
}
```

### Function for Step 4 - Create Two Tibbles

```{r}
create_datasets <- function(long_data) {
  County_indices <- grep(pattern = ", [A-Z]{2}", long_updated$area_name)
  noncounty_tibble <- long_updated[-County_indices, ]
  county_tibble <- long_updated[County_indices, ]
  class(county_tibble) <- c("county", class(county_tibble))
  class(noncounty_tibble) <- c("state", class(noncounty_tibble))
  final_county_tibble <- state_function(county_tibble)
  final_noncounty_tibble <- division_function(noncounty_tibble)
  return(list(final_county_tibble, final_noncounty_tibble))
}
```

### Wrapper Function

```{r}
my_wrapper <- function(url, value = "Enrollment Value"){
  result <- read_csv(url) |>
  readData(value = value) |>
  dataYear() |>
  create_datasets()
  return(result)
}  
```

## Call It and Combine Your Data

```{r}
Data_1A <-my_wrapper("data/EDU01a.csv")
Data_1B <-my_wrapper("data/EDU01b.csv")

combine <-function (input1,input2) { 
all_county <-bind_rows(input1[[1]], input2[[1]])
all_noncounty<-bind_rows(input1[[2]], input2[[2]])
return(list(all_county, all_noncounty))
}

combined_data <-combine (Data_1A,Data_1B)
```

## Writing a Generic Function for Summarizing

### Plot Function for State
```{r}
plot.state <- function(df, var_name = "enrollment_value") {
  ggplot(df[[2]] |> 
    filter(division != "ERROR") |>
    group_by(division, year) |> 
    mutate(mean = mean(get(var_name))), 
    aes(x = year, y = mean, color = division)) +
    geom_line(aes(color = division)) +
    labs(x = "Year", y = "Mean of Enrollment Values", 
         title = "State plot by Division") +
    scale_color_discrete(name = "Division")
}
```

### Plot Function for County

```{r}
plot.county <- function(df, state_name = "NC", var_name = "enrollment_value", 
                        sortby = "top", sortvalue = 5) {
  newdf <- df[[1]] |> 
    filter(state == state_name) |>
    group_by(area_name) |>
    mutate(mean = mean(get(var_name)))
  sortdf <- if (sortby == "top") {
    head(arrange(newdf, desc(mean)), n = sortvalue)
  } else if (sortby == "bottom") {
    head(arrange(newdf, mean), n = sortvalue)
  }
  ggplot(sortdf, 
    aes(x = year, y = get(var_name), color = area_name)
  ) +
    geom_line(aes(color = area_name)) +
    labs(x = "Year", y = var_name, title = "County plot") +
    scale_color_discrete(name = "Area Name")
}
```

## Put It Together

### Data Processing Function

```{r}
EDU01AWrapped<-my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
EDU01BWrapped<-my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
```

### Combine Function

```{r}
combined_enrolled <- combine (EDU01AWrapped,EDU01BWrapped)
```

### Plot Function on State Data Frame

```{r}
plot.state(combined_enrolled)
```

### Plot Function on County Data Frame

```{r}
plot.county(combined_enrolled, sortvalue = 20)
```

```{r}
plot.county(combined_enrolled, state_name = "SC", var_name = "enrollment_value", 
            sortby = "bottom", sortvalue = 7 )
```

```{r}
plot.county(combined_enrolled)
```

```{r}
plot.county(combined_enrolled, state_name = "PA", sortby = "top", sortvalue = 8)
```

### Applying Functions to Other Data Sets

#### Data Processing Function 

```{r}
PST01a <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv")
PST01b <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv")
PST01c <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv")
PST01d <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv")

```

#### Combine Function

```{r}
Combined_PST01ab<-combine(PST01a,PST01b)
Combined_PST01cd <-combine(PST01c, PST01d)
Combined_PST01all <- combine(Combined_PST01ab, Combined_PST01cd )

```

#### Plot Function on State Data Frame

```{r}
plot.state(Combined_PST01all)
```

#### Plot Function on County Data Frame

```{r}
plot.county(Combined_PST01all, state_name = "CA", sortby = "top", sortvalue = 15)
```

```{r}
plot.county(Combined_PST01all, state_name = "TX", sortby = "top", sortvalue = 4)
```

```{r}
plot.county(Combined_PST01all)
```

```{r}
plot.county(Combined_PST01all, state_name = "NY", sortby = "top", sortvalue = 10)
```
